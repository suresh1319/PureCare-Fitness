<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - PureCare Fitness</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .chat-container {
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        .chat-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #bce3d7;
        }

        .chat-header h1 {
            color: #333;
            margin: 0;
        }

        .chat-messages {
            height: 400px;
            overflow-y: auto;
            padding: 20px;
            background: #f9f9f9;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .message {
            margin-bottom: 15px;
            padding: 10px 15px;
            border-radius: 15px;
            max-width: 70%;
            word-wrap: break-word;
        }

        .message.sent {
            background: #bce3d7;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .message.received {
            background: #f0f0f0;
            margin-right: auto;
            border-bottom-left-radius: 5px;
        }

        .message-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            font-size: 12px;
            color: #666;
        }

        .message-content {
            color: #333;
        }

        .chat-input {
            display: flex;
            gap: 10px;
        }

        .chat-input input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s ease;
        }

        .chat-input input:focus {
            border-color: #bce3d7;
        }

        .chat-input button {
            padding: 10px 20px;
            background: #bce3d7;
            color: #000;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .chat-input button:hover {
            background: #9fd1c2;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .typing-indicator {
            color: #666;
            font-style: italic;
            margin-bottom: 10px;
            display: none;
        }

        .no-messages {
            text-align: center;
            color: #666;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h1>Chat</h1>
        </div>

        <div class="chat-messages" id="chatMessages">
            <div class="no-messages">No messages yet. Start the conversation!</div>
        </div>

        <div class="typing-indicator" id="typingIndicator"></div>

        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message..." autocomplete="off">
            <button id="sendButton">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const typingIndicator = document.getElementById('typingIndicator');
        let typingTimeout;

        // Function to add a message to the chat
        function addMessage(message, isSent = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isSent ? 'sent' : 'received'}`;
            
            const messageHeader = document.createElement('div');
            messageHeader.className = 'message-header';
            messageHeader.innerHTML = `
                <span>${message.user.name}</span>
                <span>${new Date(message.timestamp).toLocaleTimeString()}</span>
            `;
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            messageContent.textContent = message.content;
            
            messageDiv.appendChild(messageHeader);
            messageDiv.appendChild(messageContent);
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Hide "no messages" indicator if it exists
            const noMessages = document.querySelector('.no-messages');
            if (noMessages) {
                noMessages.style.display = 'none';
            }
        }

        // Handle sending messages
        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                fetch('/chat/message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        messageInput.value = '';
                    }
                })
                .catch(error => console.error('Error:', error));
            }
        }

        // Event listeners
        sendButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Typing indicator
        messageInput.addEventListener('input', () => {
            socket.emit('typing', { user: '<%= user.name %>' });
            
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit('stop typing');
            }, 1000);
        });

        // Socket event listeners
        socket.on('chat message', (message) => {
            addMessage(message, message.user.id === '<%= user.id %>');
        });

        socket.on('typing', (data) => {
            typingIndicator.textContent = `${data.user} is typing...`;
            typingIndicator.style.display = 'block';
        });

        socket.on('stop typing', () => {
            typingIndicator.style.display = 'none';
        });

        // Focus input on load
        messageInput.focus();
    </script>
</body>
</html>
